    #include <bits/stdc++.h>
    #define ll long long
    #define ld long double
    #define pb push_back
    #define no cout << "NO" << endl;
    #define el endl;
    #define all(x) begin(x), end(x)
    #define yes cout << "YES" << endl;
    using namespace std;
    const unsigned int N = 2e5 + 10 , M = 502,mod = 998244353;
    #include<bits/stdc++.h>
    #include<ext/pb_ds/assoc_container.hpp>
    #include<ext/pb_ds/tree_policy.hpp>

    using namespace std;
    using namespace __gnu_pbds;
    //
    //typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> pbds; // find_by_order, order_of_key
    vector<int> idxx = {1,-1,0,0};
    vector<int> idy = {0,0,1,-1};
    void MO()
    {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
    /*
     LIS USING binary search
     if we supposed that we have
     1 7 8 4 5 6 -1 9
     and we need to get the longest increasing subsequence
     so 1 7 8
     1 4 5 6 9
     -1
     1 9
     so the longest one is 5
     but that will take a lot of memory we need smart solution
     we will have our array x

     1 7 8  and now we need to add 4 we can save some space and put it in the same array because that will not
     effect our answer
     1 4 8    add 5  1 4 5 6 -- > -1 4 5 6 9 so the longest one is 9 but this sequence doesnot represnt the LIS
     we need binary search to know in which position we will insert our element

     now we need to constrct the pattern
     easily using another two arrays
     one to restore the index of the position
     and another one for save the previous for each idx
     * */
    void solve()
    {
     ll n;
     cin >> n;
     vector<ll> ele(n);
     for(auto &i : ele)cin >> i;
     vector<ll> arr,pos;
     vector<ll> prev(n,-1);
        arr.pb(ele[0]);
        pos.pb(0);
     for(ll i =1;i<n;i++)
     {
         ll idx = lower_bound(all(arr),ele[i]) - arr.begin(); // first element greater than my value to insert
         if(ele[i] > arr.back())
         {
             arr.pb(ele[i]);
             pos.pb(i);// for the sequence
         }else
         {
             arr[idx] = ele[i];
             pos[idx] = i;// for the sequence
         }
         if(idx > 0)
         prev[i] = pos[idx-1]; // save the previous
     }
     cout << arr.size() << el;
     vector<ll> res;
     int cur_idx = pos.back();
     while(cur_idx != -1)
     {
      res.pb(ele[cur_idx]);
      cur_idx = prev[cur_idx];
     }
        reverse(all(res));
     for(auto &i : res)cout << i << " ";
     cout  << el;
    }
    signed main() {
        MO();
        ll t = 1;
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif
       //cin >> t;
        while (t--) {
            solve();
        }
    }