void solve() {
        ll n;
        cin >> n;
        vector<ll> comp(n),ele(n);
        for(ll i = 0;i<n;i++)
        {
           cin >> comp[i];
           ele[i] = comp[i];
        }
        // compress the numbers
        sort(begin(comp), end(comp));
        comp.resize(unique(begin(comp), end(comp)) - begin(comp));
        auto idx = [&](int x) -> int {
            return lower_bound(begin(comp), end(comp), x) - begin(comp);
        };


        ll maxelement = 0;
        for(ll i = 0;i<n;i++)
        {
           ele[i] = idx(ele[i]);
           maxelement = max(maxelement,ele[i]);
        }

        // here is the code
        Segtree seg(maxelement+2);
        for(ll i = n-1;i>-1;i--)
        {
//            for(ll j = i+1;i<n;i++)
//            {
//               if(ele[i] <= ele[j]) dp[i] = max(dp[i],1+dp[j]);
//            }
          ll mx = seg.query(ele[i],maxelement+1);
          seg.update_it(ele[i],mx+1);
        }
        cout << max(1LL,seg.query(0,maxelement+1)) << endl;
